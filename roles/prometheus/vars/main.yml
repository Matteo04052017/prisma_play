
prometheus_global:
  scrape_interval: 15s
  scrape_timeout: 10s
  evaluation_interval: 15s

prometheus_node_metric_relabel_configs: []
prometheus_static_node_metric_relabel_configs: 
  - action: replace
    regex: 10\.8\.0\.8:9100
    replacement: teststation:9100
    source_labels:
    - instance
    target_label: instance
  - action: replace
    regex: 10\.8\.0\.6:9100
    replacement: barolo:9100
    source_labels:
    - instance
    target_label: instance
  - action: replace
    regex: 10\.8\.0\.7:9100
    replacement: racalmuto:9100
    source_labels:
    - instance
    target_label: instance

prometheus_remote_write: []

prometheus_remote_read: []

prometheus_alertmanager_config:
  - scheme: http
    static_configs:
      - targets: ["{{ ansible_fqdn | default(ansible_host) | default('localhost') }}:9093"]

prometheus_scrape_configs:
- job_name: "prometheus"
  static_configs:
    - targets:
        - "{{ ansible_fqdn | default(ansible_host) | default('localhost') }}:9090"
- job_name: "node"
  static_configs:
    - targets:
        - "{{ ansible_fqdn | default(ansible_host) | default('localhost') }}:9100"
        - 10.8.0.1:9100 ## vpn server
        - 10.8.0.8:9100 ## teststation
        #- 10.8.0.6:9100 ## barolo not working anymore -- lost
        #- 10.8.0.7:9100 ## racalmuto

prometheus_record_rules:
  - record: instance:node_cpu:load
    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)

  - record: instance:node_ram:usage
    expr: (1 - node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100

  - record: instance:node_fs:disk_space
    expr: node_filesystem_avail_bytes{mountpoint="/",job="node"} / node_filesystem_size_bytes{mountpoint="/",job="node"} * 100

prometheus_alert_rules:
- alert: Watchdog
  expr: vector(1)
  for: 10m
  labels:
    severity: warning
  annotations:
    description: 'This is an alert meant to ensure that the entire alerting pipeline is functional.
      This alert is always firing, therefore it should always be firing in Alertmanager
      and always fire against a receiver. There are integrations with various notification
      mechanisms that send a notification when this alert is not firing. For example the
      "DeadMansSnitch" integration in PagerDuty.'
    summary: 'Ensure entire alerting pipeline is functional'
- alert: InstanceDown
  expr: "up == 0"
  for: 5m
  labels:
    severity: critical
  annotations:
    description: "{% raw %}{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes.{% endraw %}"
    summary: "{% raw %}Instance {{ $labels.instance }} down{% endraw %}"
- alert: CriticalCPULoad
  expr: 'instance:node_cpu:load > 98'
  for: 30m
  labels:
    severity: critical
  annotations:
    description: "{% raw %}{{ $labels.instance }} of job {{ $labels.job }} has Critical CPU load for more than 30 minutes.{% endraw %}"
    summary: "{% raw %}Instance {{ $labels.instance }} - Critical CPU load{% endraw %}"
- alert: CriticalRAMUsage
  expr: 'instance:node_ram:usage > 98'
  for: 5m
  labels:
    severity: critical
  annotations:
    description: "{% raw %}{{ $labels.instance }} has Critical Memory Usage more than 5 minutes.{% endraw %}"
    summary: "{% raw %}Instance {{ $labels.instance }} has Critical Memory Usage{% endraw %}"
- alert: CriticalDiskSpace
  expr: 'instance:node_fs:disk_space < 20'
  for: 4m
  labels:
    severity: critical
  annotations:
    description: "{% raw %}{{ $labels.instance }} of job {{ $labels.job }} has less than 10% space remaining.{% endraw %}"
    summary: "{% raw %}Instance {{ $labels.instance }} - Critical disk space usage{% endraw %}"
- alert: ClockSkewDetected
  expr: 'abs(node_timex_offset_seconds) * 1000 > 30'
  for: 2m
  labels:
    severity: warning
  annotations:
    description: "{% raw %}Clock skew detected on {{ $labels.instance }}. Ensure NTP is configured correctly on this host.{% endraw %}"
    summary: "{% raw %}Instance {{ $labels.instance }} - Clock skew detected{% endraw %}"